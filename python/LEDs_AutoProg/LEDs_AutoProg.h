// This file contains the DCC and LED definitions.
//
// It was automatically generated by the program ProgGenerator Ver. 3.2.1C      by Hardi
// File creation: 05/06/23 15:44:12
// (Attention: The display in the Arduino IDE is not updated if Options/External Editor is disabled)

#ifndef __LEDS_AUTOPROG_H__
#define __LEDS_AUTOPROG_H__

#ifndef CONFIG_ONLY
#ifndef ARDUINO_RASPBERRY_PI_PICO
#define FASTLED_INTERNAL       // Disable version number message in FastLED library (looks like an error)
#include <FastLED.h>           // The FastLED library must be installed in addition if you got the error message "..fatal error: FastLED.h: No such file or directory"
                               // Arduino IDE: Sketch / Include library / Manage libraries                    Deutsche IDE: Sketch / Bibliothek einbinden / Bibliothek verwalten
                               //              Type "FastLED" in the "Filter your search..." field                          "FastLED" in das "Grenzen Sie ihre Suche ein" Feld eingeben
                               //              Select the entry and click "Install"                                         Gefundenen Eintrag auswaehlen und "Install" anklicken
#else
#include <PicoFastLED.h>       // Juergens minimum version or FastLED for Raspberry Pico
#endif
#endif // CONFIG_ONLY

#include <MobaLedLib.h>

#define START_MSG "LEDs_AutoProg Ver 1: 05.06.23 15:44"

#define TWO_BUTTONS_PER_ADDRESS 1      // Two buttons (Red/Green) are used (DCC/CAN)
#ifdef NUM_LEDS
  #warning "'NUM_LEDS' definition in the main program is replaced by the included 'LEDs_AutoProg.h' with 20"
  #undef NUM_LEDS
#endif

#define NUM_LEDS 20                    // Number of LEDs (Maximal 256 RGB LEDs could be used)

#define LEDS_PER_CHANNEL ",20"

#define RECEIVE_LED_COLOR_PER_RS232

#define GEN_BUTTON_RELEASE_COM GEN_OFF
#define USE_EXT_ADDR
#define USE_RS232_OR_SPI_AS_INPUT      // Use the RS232 or SPI Input to read DCC/SX commands from the second Arduino and from the PC (The SPI is only used if enabled with USE_SPI_COM)
#define ADDR_OFFSET 0

#define ADDR_MSK  0x3FFF  // 14 Bits are used for the Address

#define S_ONOFF   (uint16_t)0
#define B_RED     (uint16_t)(1<<14)
#define B_GREEN   (uint16_t)(2<<14)
#define O_RET_MSG (uint16_t)(3<<14)    // Return messages (Rueckmelder)
#define B_TAST    B_RED


typedef struct
    {
    uint16_t AddrAndTyp; // Addr range: 0..16383. The upper two bytes are used for the type
    uint8_t  InCnt;
    } __attribute__ ((packed)) Ext_Addr_T;

// Definition of external adresses
#ifdef CONFIG_ONLY
const Ext_Addr_T Ext_Addr[] __attribute__ ((section (".MLLAddressConfig"))) =
#else
const PROGMEM Ext_Addr_T Ext_Addr[] =
#endif
         { // Addr & Typ    InCnt
           { 100  + S_ONOFF,   1 },      // Excel row 11
           { 101  + S_ONOFF,   1 },      // Excel row 13
           { 102  + S_ONOFF,   1 },      // Excel row 15
           { 103  + S_ONOFF,   1 },      // Excel row 17
           { 104  + S_ONOFF,   1 },      // Excel row 19
           { 105  + S_ONOFF,   1 },      // Excel row 21
           { 106  + S_ONOFF,   1 },      // Excel row 23
           { 107  + S_ONOFF,   1 },      // Excel row 25
           { 108  + S_ONOFF,   1 },      // Excel row 27
         };


// Input channel defines for local inputs and expert users
#define INCH_DCC_100_ONOFF      0      // Excel row 11
#define INCH_DCC_101_ONOFF      1      // Excel row 13
#define INCH_DCC_102_ONOFF      2      // Excel row 15
#define INCH_DCC_103_ONOFF      3      // Excel row 17
#define INCH_DCC_104_ONOFF      4      // Excel row 19
#define INCH_DCC_105_ONOFF      5      // Excel row 21
#define INCH_DCC_106_ONOFF      6      // Excel row 23
#define INCH_DCC_107_ONOFF      7      // Excel row 25
#define INCH_DCC_108_ONOFF      8      // Excel row 27


//*** Output Channels ***
#define START_VARIABLES   9                                        // Define the start number for the variables.
#define A1                      9                                        // Z21-RM-Rückmelder: Adresse:2 Eingang:1
#define A2                      10                                       // Z21-RM-Rückmelder: Adresse:1 Eingang:8
#define A3                      11                                       // Z21-RM-Rückmelder: Adresse:1 Eingang:7
#define A4                      12                                       // Z21-RM-Rückmelder: Adresse:1 Eingang:6
#define A5                      13                                       // Z21-RM-Rückmelder: Adresse:1 Eingang:5
#define A6                      14                                       // Z21-RM-Rückmelder: Adresse:1 Eingang:4
#define A7                      15                                       // Z21-RM-Rückmelder: Adresse:1 Eingang:3
#define A8                      16                                       // Z21-RM-Rückmelder: Adresse:1 Eingang:2
#define A9                      17                                       // Z21-RM-Rückmelder: Adresse:1 Eingang:1


#define START_SEND_INPUTS 9                                        // Start address of all switches/variables
#define TOTAL_SEND_INPUTS 9                                        // Number of used switches/variables
#define TOTAL_SWITCHES_A  0                                        // Number of used inputs for analog keyboard
#define TOTAL_SWITCHES_B  0                                        // Number of used inputs for keyboard 1
#define TOTAL_SWITCHES_C  0                                        // Number of used inputs for keyboard 2
#define TOTAL_SWITCHES_D  0                                        // Number of used inputs for main board switches
#define TOTAL_VARIABLES   9                                        // Number of used variables
/*********************/
#define SETUP_FASTLED()                                                      \
/*********************/                                                      \
  CLEDController& controller0 = FastLED.addLeds<NEOPIXEL,  6>(leds+  0, 20); \
                                                                             \
  controller0.clearLeds(256);                                                \
  FastLED.setDither(DISABLE_DITHER);       // avoid sending slightly modified brightness values
/*End*/

// ----- LED to Var -----
  #define USE_LED_TO_VAR

  #define T_EQUAL_THEN     0
  #define T_NOT_EQUAL_THEN 1
  #define T_LESS_THEN      2
  #define T_GREATER_THAN   3
  #define T_BIN_MASK       4
  #define T_NOT_BIN_MASK   5

  typedef struct
      {
      uint8_t  Var_Nr;
      uint8_t  LED_Nr;
      uint8_t  Offset_and_Typ; // ---oottt    Offset: 0..2
      uint8_t  Val;
      } __attribute__ ((packed)) LED2Var_Tab_T;

#ifdef CONFIG_ONLY
  const LED2Var_Tab_T LED2Var_Tab[] __attribute__ ((section (".MLLL2VConfig"))) =
#else
  const PROGMEM LED2Var_Tab_T LED2Var_Tab[] =
#endif
      {
        // Var name           LED_Nr LED Offset   Typ                Compare value
        { A1,                 0,     (0   << 3) | T_GREATER_THAN,    0   },        { A2,                 1,     (0   << 3) | T_GREATER_THAN,    0   },        { A3,                 2,     (0   << 3) | T_GREATER_THAN,    0   },        { A4,                 3,     (0   << 3) | T_GREATER_THAN,    0   },        { A5,                 4,     (0   << 3) | T_GREATER_THAN,    0   },        { A6,                 5,     (0   << 3) | T_GREATER_THAN,    0   },        { A7,                 6,     (0   << 3) | T_GREATER_THAN,    0   },        { A8,                 7,     (0   << 3) | T_GREATER_THAN,    0   },        { A9,                 8,     (0   << 3) | T_GREATER_THAN,    0   },
      };




//*******************************************************************
// *** Configuration array which defines the behavior of the LEDs ***
MobaLedLib_Configuration()
  {
  #define SEND_INPUTS                                                                                         /* Excel row 10                                                                                                                                                                                */
  ConstRGB(0, 0, 0, 0, 0, 127, 127, 127)                                                                      /* Excel row 11                                                                                                                                                                                */
  // LED_to_Var(A1, 0, >, 0)                                                                                  /* Excel row 12                                                                                                                                                                                */
  Const(1, C_ALL, 1, 0, 127)                                                                                  /* Excel row 13                                                                                                                                                                                */
  // LED_to_Var(A2, 0, >, 0)                                                                                  /* Excel row 14                                                                                                                                                                                */
  Const(2, C_ALL, 2, 0, 127)                                                                                  /* Excel row 15                                                                                                                                                                                */
  // LED_to_Var(A3, 0, >, 0)                                                                                  /* Excel row 16                                                                                                                                                                                */
  Const(3, C_ALL, 3, 0, 127)                                                                                  /* Excel row 17                                                                                                                                                                                */
  // LED_to_Var(A4, 0, >, 0)                                                                                  /* Excel row 18                                                                                                                                                                                */
  Const(4, C_ALL, 4, 0, 127)                                                                                  /* Excel row 19                                                                                                                                                                                */
  // LED_to_Var(A5, 0, >, 0)                                                                                  /* Excel row 20                                                                                                                                                                                */
  Const(5, C_ALL, 5, 0, 127)                                                                                  /* Excel row 21                                                                                                                                                                                */
  // LED_to_Var(A6, 0, >, 0)                                                                                  /* Excel row 22                                                                                                                                                                                */
  Const(6, C_ALL, 6, 0, 127)                                                                                  /* Excel row 23                                                                                                                                                                                */
  // LED_to_Var(A7, 0, >, 0)                                                                                  /* Excel row 24                                                                                                                                                                                */
  Const(7, C_ALL, 7, 0, 127)                                                                                  /* Excel row 25                                                                                                                                                                                */
  // LED_to_Var(A8, 0, >, 0)                                                                                  /* Excel row 26                                                                                                                                                                                */
  Const(8, C_ALL, 8, 0, 127)                                                                                  /* Excel row 27                                                                                                                                                                                */
  // LED_to_Var(A9, 0, >, 0)                                                                                  /* Excel row 28                                                                                                                                                                                */

  EndCfg // End of the configuration
  };
//*******************************************************************

//---------------------------------------------
void Set_Start_Values(MobaLedLib_C &MobaLedLib)
//---------------------------------------------
{
}


// if function returns TRUE the calling loop stops
typedef bool(*HandleValue_t) (uint8_t CallbackType, uint8_t ValueId, uint8_t* Value, uint16_t EEPromAddr, uint8_t TargetValueId, uint8_t Options);


#define InCnt_MSK  0x003F  // 6 bits are used for the InCnt, 2 bits for the type ttcc cccc => Max InCnt=63
#define IS_COUNTER (uint8_t)0x80
#define IS_PULSE   (uint8_t)0x40
#define IS_TOGGLE  (uint8_t)0x00
#define COUNTER_ID

typedef struct
    {
    uint8_t TypAndInCnt; // Type bits 7 & 6, InCnt 0..5
    uint8_t Channel;
    } __attribute__ ((packed)) Store_Channel_T;

// Definition of channels and counters that need to store state in EEProm
const PROGMEM Store_Channel_T Store_Values[] =
         { // Mode + InCnt , Channel
           { IS_TOGGLE + 1 , INCH_DCC_100_ONOFF  },      // Excel row 11
           { IS_TOGGLE + 1 , INCH_DCC_101_ONOFF  },      // Excel row 13
           { IS_TOGGLE + 1 , INCH_DCC_102_ONOFF  },      // Excel row 15
           { IS_TOGGLE + 1 , INCH_DCC_103_ONOFF  },      // Excel row 17
           { IS_TOGGLE + 1 , INCH_DCC_104_ONOFF  },      // Excel row 19
           { IS_TOGGLE + 1 , INCH_DCC_105_ONOFF  },      // Excel row 21
           { IS_TOGGLE + 1 , INCH_DCC_106_ONOFF  },      // Excel row 23
           { IS_TOGGLE + 1 , INCH_DCC_107_ONOFF  },      // Excel row 25
           { IS_TOGGLE + 1 , INCH_DCC_108_ONOFF  },      // Excel row 27
         };

#ifndef CONFIG_ONLY
#endif // CONFIG_ONLY





#endif // __LEDS_AUTOPROG_H__
