// This file contains the DCC and LED definitions.
//
// It was automatically generated by the program PyProgramWorkbook Ver. 3.1.0F4      by Hardi
// File creation: 04/19/22 14:02:06
// (Attention: The display in the Arduino IDE is not updated if Options/External Editor is disabled)

#ifndef __LEDS_AUTOPROG_H__
#define __LEDS_AUTOPROG_H__

#ifndef CONFIG_ONLY
#ifndef ARDUINO_RASPBERRY_PI_PICO
#define FASTLED_INTERNAL       // Disable version number message in FastLED library (looks like an error)
#include <FastLED.h>           // The FastLED library must be installed in addition if you got the error message "..fatal error: FastLED.h: No such file or directory"
                               // Arduino IDE: Sketch / Include library / Manage libraries                    Deutsche IDE: Sketch / Bibliothek einbinden / Bibliothek verwalten
                               //              Type "FastLED" in the "Filter your search..." field                          "FastLED" in das "Grenzen Sie ihre Suche ein" Feld eingeben
                               //              Select the entry and click "Install"                                         Gefundenen Eintrag auswaehlen und "Install" anklicken
#else
#include <PicoFastLED.h>       // Juergens minimum version or FastLED for Raspberry Pico
#endif
#endif // CONFIG_ONLY

#include <MobaLedLib.h>

#define START_MSG "LEDs_AutoProg Ver 1: 04/19/22 14:02:06"

#define TWO_BUTTONS_PER_ADDRESS 1      // Two buttons (Red/Green) are used (DCC/CAN)
#ifdef NUM_LEDS
  #warning "'NUM_LEDS' definition in the main program is replaced by the included 'LEDs_AutoProg.h' with 66"
  #undef NUM_LEDS
#endif

#define NUM_LEDS 66                    // Number of LEDs (Maximal 256 RGB LEDs could be used)

#define LEDS_PER_CHANNEL ",66"

#define USE_EXT_ADDR
#define USE_RS232_OR_SPI_AS_INPUT      // Use the RS232 or SPI Input to read DCC/SX commands from the second Arduino and from the PC (The SPI is only used if enabled with USE_SPI_COM)
#define ADDR_OFFSET 0

#define ADDR_MSK  0x3FFF  // 14 Bits are used for the Address

#define S_ONOFF   (uint16_t)0
#define B_RED     (uint16_t)(1<<14)
#define B_GREEN   (uint16_t)(2<<14)
#define B_RESERVE (uint16_t)(3<<14)    // Not used at the moment
#define B_TAST    B_RED


typedef struct
    {
    uint16_t AddrAndTyp; // Addr range: 0..16383. The upper two bytes are used for the type
    uint8_t  InCnt;
    } __attribute__ ((packed)) Ext_Addr_T;

// Definition of external adresses
#ifdef CONFIG_ONLY
const Ext_Addr_T Ext_Addr[] __attribute__ ((section (".MLLAddressConfig"))) =
#else
const PROGMEM Ext_Addr_T Ext_Addr[] =
#endif
         { // Addr & Typ    InCnt
           { 100  + S_ONOFF, 1 },      // HOUSE - 16 LEDs{NewLine}           { 101  + S_ONOFF, 1 },      // Andreaskreuz - 2 LEDs{NewLine}           { 102  + S_ONOFF, 1 },      // Baustelle - 6x RGB-LEDs{NewLine}           { 103  + S_ONOFF, 1 },      // Schweiﬂlicht - Dauerschweiﬂer           { 104  + S_ONOFF, 1 },      // Windrad - Blinklicht           { 105  + S_ONOFF, 1 },      // Blaulicht - Varinate 1 - 1 LED           { 106  + S_ONOFF, 1 },      // Blaulicht Typ 2 - 1 LED           { 107  + S_ONOFF, 1 },      // Ampel - 2x WS2812           { 108  + S_ONOFF, 1 },      // Blinker	1           { 109  + S_ONOFF, 1 },      // Blitzer	1           { 110  + S_ONOFF, 1 },      // Strassenbeleuchtung - 16 RGB-LEDs (2 Zeilen)           { 120  + B_RED,   3 },      // Servo #1 (roter Kanal)           { 122  + B_GREEN, 5 },      // Servo #2 - (blauer Kanal)         };


// Input channel defines for local inputs and expert users
#define INCH_DCC_100_ONOFF      0      // HOUSE - 16 LEDs{NewLine}#define INCH_DCC_101_ONOFF      1      // Andreaskreuz - 2 LEDs{NewLine}#define INCH_DCC_102_ONOFF      2      // Baustelle - 6x RGB-LEDs{NewLine}#define INCH_DCC_103_ONOFF      3      // Schweiﬂlicht - Dauerschweiﬂer#define INCH_DCC_104_ONOFF      4      // Windrad - Blinklicht#define INCH_DCC_105_ONOFF      5      // Blaulicht - Varinate 1 - 1 LED#define INCH_DCC_106_ONOFF      6      // Blaulicht Typ 2 - 1 LED#define INCH_DCC_107_ONOFF      7      // Ampel - 2x WS2812#define INCH_DCC_108_ONOFF      8      // Blinker	1#define INCH_DCC_109_ONOFF      9      // Blitzer	1#define INCH_DCC_110_ONOFF      10     // Strassenbeleuchtung - 16 RGB-LEDs (2 Zeilen)#define INCH_DCC_120_RED        11     // Servo #1 (roter Kanal)#define INCH_DCC_120_GREEN      12     //     "#define INCH_DCC_121_RED        13     //     "#define INCH_DCC_122_GREEN      14     // Servo #2 - (blauer Kanal)#define INCH_DCC_123_RED        15     //     "#define INCH_DCC_123_GREEN      16     //     "#define INCH_DCC_124_RED        17     //     "#define INCH_DCC_124_GREEN      18     //     "// Local InCh variables#define LOC_INCH0               19

/*********************/
#define SETUP_FASTLED()                                                      \
/*********************/                                                      \
  CLEDController& controller0 = FastLED.addLeds<NEOPIXEL,  6>(leds+  0, 66); \
                                                                             \
  controller0.clearLeds(256);                                                \
  FastLED.setDither(DISABLE_DITHER);       // avoid sending slightly modified brightness values
/*End*/



//*******************************************************************
// *** Configuration array which defines the behavior of the LEDs ***
MobaLedLib_Configuration()
  {
  RGB_Heartbeat(0)                                                                                            /* LED auf dem Mainboard                                                                                                                                                                       */  HouseT(1, 0, 5, 11, 1, 25, NEON_LIGHT, NEON_LIGHT, ROOM_WARM_W, ROOM_WARM_W, ROOM_TV0, NEON_LIGHT, NEON_LIGHT, ROOM_TV1, NEON_DEF_D, ROOM_TV0_CHIMNEY, ROOM_TV0_CHIMNEYB, CANDLE, CANDLE, NEON_DEF_D, NEON_LIGHT) /* HOUSE - 16 LEDs{NewLine}                                                              */  AndreaskrRGB(15, 1)                                                                                         /* Andreaskreuz - 2 LEDs{NewLine}                                                                                                                                                              */  ConstrWarnLightRGB6(17, 2, 5, 128, 100 ms, 25 ms, 500 ms)                                                   /* Baustelle - 6x RGB-LEDs{NewLine}                                                                                                                                                            */  WeldingCont(23, 3)                                                                                          /* Schweiﬂlicht - Dauerschweiﬂer                                                                                                                                                               */  Leuchtfeuer(24, C1, 4)                                                                                      /* Windrad - Blinklicht                                                                                                                                                                        */  BlueLight1(24, C23, 5)                                                                                      /* Blaulicht - Varinate 1 - 1 LED                                                                                                                                                              */  BlueLight2(24, C23, 6)                                                                                      /* Blaulicht Typ 2 - 1 LED                                                                                                                                                                     */  RGB_AmpelX(25, 7)                                                                                           /* Ampel - 2x WS2812                                                                                                                                                                           */  Blinker(31, C12, 8, 1 Sek)                                                                                  /* Blinker	1                                                                                                                                                                                   */  Flash(32, C_ALL, 9, LOC_INCH0, 1 Sek, 1 Sek)                                                                /* Blitzer	1                                                                                                                                                                                   */  GasLights(33, 10, GAS_LIGHTD, GAS_LIGHTD, GAS_LIGHTD, GAS_LIGHTD, GAS_LIGHTD, GAS_LIGHTD, GAS_LIGHTD, GAS_LIGHTD, GAS_LIGHTD, GAS_LIGHTD, GAS_LIGHTD, GAS_LIGHTD, GAS_LIGHTD, GAS_LIGHTD, GAS_LIGHTD, GAS_LIGHTD) /* Strassenbeleuchtung - 16 RGB-LEDs (2 Zeilen)                                          */  // Reserve LEDs(16)                                                                                         /* 2 Zeilen der Matrix auslassen                                                                                                                                                               */  Servo3(65, 11, C1, 10, 110, 210, 5 Sek)                                                                     /* Servo #1 (roter Kanal)                                                                                                                                                                      */  Servo5(65, 14, C3, 10, 52, 115, 166, 210, 10 Sek)                                                           /* Servo #2 - (blauer Kanal)                                                                                                                                                                   */
  EndCfg // End of the configuration
  };
//*******************************************************************

//---------------------------------------------
void Set_Start_Values(MobaLedLib_C &MobaLedLib)
//---------------------------------------------
{
}


// if function returns TRUE the calling loop stops
typedef bool(*HandleValue_t) (uint8_t CallbackType, uint8_t ValueId, uint8_t* Value, uint16_t EEPromAddr, uint8_t TargetValueId, uint8_t Options);


#define InCnt_MSK  0x0007  // 3 Bits are used for the InCnt
#define IS_COUNTER (uint8_t)0x80
#define IS_PULSE   (uint8_t)0x40
#define IS_TOGGLE  (uint8_t)0x00
#define COUNTER_ID

typedef struct
    {
    uint8_t TypAndInCnt; // Type bit 7, InCnt bits 0..3, reserved 0 bits 4..6
    uint8_t Channel;
    } __attribute__ ((packed)) Store_Channel_T;

// Definition of channels and counters that need to store state in EEPromconst PROGMEM Store_Channel_T Store_Values[] =         { // Mode + InCnt , Channel
           { IS_TOGGLE + 1 , INCH_DCC_100_ONOFF  },      // HOUSE - 16 LEDs{NewLine}           { IS_TOGGLE + 1 , INCH_DCC_101_ONOFF  },      // Andreaskreuz - 2 LEDs{NewLine}           { IS_TOGGLE + 1 , INCH_DCC_102_ONOFF  },      // Baustelle - 6x RGB-LEDs{NewLine}           { IS_TOGGLE + 1 , INCH_DCC_103_ONOFF  },      // Schweiﬂlicht - Dauerschweiﬂer           { IS_TOGGLE + 1 , INCH_DCC_104_ONOFF  },      // Windrad - Blinklicht           { IS_TOGGLE + 1 , INCH_DCC_105_ONOFF  },      // Blaulicht - Varinate 1 - 1 LED           { IS_TOGGLE + 1 , INCH_DCC_106_ONOFF  },      // Blaulicht Typ 2 - 1 LED           { IS_TOGGLE + 1 , INCH_DCC_107_ONOFF  },      // Ampel - 2x WS2812           { IS_TOGGLE + 1 , INCH_DCC_108_ONOFF  },      // Blinker	1           { IS_TOGGLE + 1 , INCH_DCC_109_ONOFF  },      // Blitzer	1           { IS_TOGGLE + 1 , INCH_DCC_110_ONOFF  },      // Strassenbeleuchtung - 16 RGB-LEDs (2 Zeilen)         };

#ifndef CONFIG_ONLY
#endif // CONFIG_ONLY





#endif // __LEDS_AUTOPROG_H__
