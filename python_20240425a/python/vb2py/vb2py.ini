#@+leo-ver=4
#@+node:@file vb2py.ini
#@+others
#@+node:General

[General]
# Space or Tab
IndentCharacter = Space	
# Number of spaces/tabs					
IndentAmount = 4							 
# Marker to use when code needs user attention
AttentionMarker = VB2PY				
# Yes or No
WarnAboutUnrenderedCode = Yes	
# Yes or No, whether to use user plugins or not. If No, system plugins will still work
LoadUserPlugins = No
# Default logging level, 0 is nothing
LoggingLevel = 1
# Yes or No, whether to dump form data to screen - Yes seems to crash the GUI!
DumpFormData = No
# Yes or No, whether the full VB parser is used to convert code
UseFullParser = Yes
# Yes or No, whether to respect Private status of variables
RespectPrivateStatus = Yes
# Prefix to use to tag data as private (Python normally uses __ but VB convention is m_)
PrivateDataPrefix = __
# Yes or No, whether to use raw strings for all literals - very safe but not necessarily good looking!
AlwaysUseRawStringLiterals = No
# Yes or No, whether to try to automatically extract docstrings from the code
TryToExtractDocStrings = Yes
# Yes or No, whether to return a partially converted file when an error is found
ReportPartialConversion = Yes
# Exception, Warning, Comment - what to insert into code when parsing fails
InsertIntoFailedCode = Comment
# Yes or No, whether to include debug code in the converted application
IncludeDebugCode = Yes
# Which controls to use VB style PythonCard control classes for
UseVBPythonCardControls = Button, StaticText, TextField, TextArea, ComboBox, ListBox, CheckBox, BitmapCanvas, TreeView, ImageList, Timer
# None
#@nonl
#@-node:General
#@+node:Style

[Style]
# Style of conversion, Pythonic or VB
# VB tries to make sure that the code works identically
# Pythonic tries to make sure the code looks like Python, but it might behave differently
ConversionStyle = VB
#@-node:Style
#@+node:Functions

[Functions]
# Name of variable used in Functions
ReturnVariableName = _ret             
# Yes or No, leave at Yes unless good reasons!
PreInitializeReturnVariable = Yes
# Yes or No, whether to rely on return statements
JustUseReturnStatement = No
#@nonl
#@-node:Functions
#@+node:Select

[Select]
# Once or EachTime, how many times to evaluate the case variable  
EvaluateVariable = Once
# Name of select variable (only used if EvaluateVariable is Once)
SelectVariablePrefix = _select
# Yes or No, use numeric index on select variable (needed if you every have nested Selects and EvaluateVariable = Once)
UseNumericIndex = Yes
#@-node:Select
#@+node:Labels

[Labels]
# Yes or No, ignore labels completely
IgnoreLabels = Yes
#@-node:Labels
#@+node:With

[With]
# Once or EachTime, how many times to evaluate the with variable  
EvaluateVariable = Once
# Name of with variable (only used if EvaluateVariable is Once)
WithVariablePrefix = _with
# Yes or No, use numeric index on with variable (needed if you every have nested Withs and EvaluateVariable = Once)
UseNumericIndex = Yes
#@-node:With
#@+node:Properties

[Properties]
# Prefix to add to property Let/Set function name
LetSetVariablePrefix = set
# Prefix to add to property Get function name
GetVariablePrefix = get
# Yes or No, When both Let and Set properties are present default to Let instead of Set
ChooseLetOverSet = No
#@-node:Properties
#@+node:Classes

[Classes]
# Yes or No, whether to use new style classes for all classes
UseNewStyleClasses = No
# Yes or No, whether to explicitly type literals in VB.NET
ExplicitlyTypeLiterals = Yes
#@-node:Classes
#@+node:Logger

[Logging]
# Which loggers are allowed to report
Allowed = VB*, vb2PyApp, vb2Py, PlugInAttributeNames, PythonCardControls
# Which loggers are not allowed to report
NotAllowed = VBParser
#@nonl
#@-node:Logger
#@+node:CustomIncludes

[Directives]
# Number, which path to choose for directives (#If #Else etc)
Path = 1

[CustomIncludes]
# This is where you put modules that need to be included - all these
# modules should be placed in the custom folder. 
# eg, ComctlLib=comctllib
#@-node:CustomIncludes
#@-others
  
#@-node:@file vb2py.ini
#@-leo
