<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
<meta name="generator" content="Docutils 0.3.0: http://docutils.sourceforge.net/" />
<link rel="stylesheet" href="default.css" type="text/css" />
</head>
<body>
<div class="document">
<!-- filename: c:\development\python22\lib\site-packages\vb2py\doc/optionslist.htm -->
<div class="section" id="list-of-options">
<h1><a name="list-of-options">List Of Options</a></h1>
<p>All the options are in the <tt class="literal"><span class="pre">vb2py.ini</span></tt> file located in the main <tt class="literal"><span class="pre">vb2py</span></tt> folder.</p>
<p><a class="reference" href="#general">General</a></p>
<blockquote>
<p><a class="reference" href="#indentcharacter">IndentCharacter</a></p>
<p><a class="reference" href="#indentamount">IndentAmount</a></p>
<p><a class="reference" href="#attentionmarker">AttentionMarker</a></p>
<p><a class="reference" href="#warnaboutunrenderedcode">WarnAboutUnrenderedCode</a></p>
<p><a class="reference" href="#loaduserplugins">LoadUserPlugins</a></p>
<p><a class="reference" href="#logginglevel">LoggingLevel</a></p>
<p><a class="reference" href="#dumpformdata">DumpFormData</a></p>
<p><a class="reference" href="#respectprivatestatus">RespectPrivateStatus</a></p>
<p><a class="reference" href="#privatedataprefix">PrivateDataPrefix</a></p>
<p><a class="reference" href="#alwaysuserawstringliterals">AlwaysUseRawStringLiterals</a></p>
<p><a class="reference" href="#trytoextractdocstrings">TryToExtractDocStrings</a></p>
<p><a class="reference" href="#reportpartialconversion">ReportPartialConversion</a></p>
<p><a class="reference" href="#includedebugcode">IncludeDebugCode</a></p>
</blockquote>
<p><a class="reference" href="#functions">Functions</a></p>
<blockquote>
<p><a class="reference" href="#returnvariablename">ReturnVariableName</a></p>
<p><a class="reference" href="#preinitializereturnvariable">PreInitializeReturnVariable</a></p>
</blockquote>
<p><a class="reference" href="#select">Select</a></p>
<blockquote>
<p><a class="reference" href="#evaluatevariable">EvaluateVariable</a></p>
<p><a class="reference" href="#selectvariableprefix">SelectVariablePrefix</a></p>
<p><a class="reference" href="#usenumericindex">UseNumericIndex</a></p>
</blockquote>
<p><a class="reference" href="#labels">Labels</a></p>
<blockquote>
<a class="reference" href="#ignorelabels">IgnoreLabels</a></blockquote>
<p><a class="reference" href="#with">With</a></p>
<blockquote>
<p><a class="reference" href="#with-evaluatevariable">With EvaluateVariable</a></p>
<p><a class="reference" href="#withvariableprefix">WithVariablePrefix</a></p>
<p><a class="reference" href="#with-usenumericindex">With UseNumericIndex</a></p>
</blockquote>
<p><a class="reference" href="#properties">Properties</a></p>
<blockquote>
<p><a class="reference" href="#letsetvariableprefix">LetSetVariablePrefix</a></p>
<p><a class="reference" href="#getvariableprefix">GetVariablePrefix</a></p>
</blockquote>
<p><a class="reference" href="#classes">Classes</a></p>
<blockquote>
<a class="reference" href="#usenewstyleclasses">UseNewStyleClasses</a></blockquote>
</div>
<div class="section" id="general">
<h1><a name="general">General</a></h1>
<p>The list of all <tt class="literal"><span class="pre">General</span></tt> options is shown in the following table:</p>
<pre class="literal-block">
[General]
# Space or Tab
IndentCharacter = Space 
# Number of spaces/tabs                                 
IndentAmount = 4                                                         
# Marker to use when code needs user attention
AttentionMarker = VB2PY                         
# Yes or No
WarnAboutUnrenderedCode = Yes   
# Yes or No, whether to use user plugins or not. If No, system plugins will still work
LoadUserPlugins = No
# Default logging level, 0 is nothing
LoggingLevel = 0
# Yes or No, whether to dump form data to screen - Yes seems to crash the GUI!
DumpFormData = No
# Yes or No, whether the full VB parser is used to convert code
UseFullParser = Yes
# Yes or No, whether to respect Private status of variables
RespectPrivateStatus = Yes
# Prefix to use to tag data as private (Python normally uses __ but VB convention is m_)
PrivateDataPrefix = __
# Yes or No, whether to use raw strings for all literals - very safe but not necessarily good looking!
AlwaysUseRawStringLiterals = No
# Yes or No, whether to try to automatically extract docstrings from the code
TryToExtractDocStrings = Yes
# Yes or No, whether to return a partially converted file when an error is found
ReportPartialConversion = Yes
# Yes or No, whether to include debug code in the converted application
IncludeDebugCode = No
</pre>
<div class="section" id="indentcharacter">
<h2><a name="indentcharacter">IndentCharacter</a></h2>
<p>Syntax: <tt class="literal"><span class="pre">IndentCharacter</span> <span class="pre">=</span> <span class="pre">Space</span> <span class="pre">|</span> <span class="pre">Tab</span></tt></p>
<pre class="literal-block">
# Space or Tab
IndentCharacter = Space 
</pre>
<p>Sets the indentation character as a Space or a Tab. The number of indent characters is set by the <a class="reference" href="#indentamount">IndentAmount</a>.</p>
<p>The default is a space.</p>
<p>VB(VBCodeModule):</p>
<pre class="literal-block">
' VB2PY-Set: General.IndentCharacter = Space
    If a = 10 Then
            b = 1
    Else
            b = 2
    End If
' VB2PY-Unset: General.IndentCharacter
</pre>
<p>Be careful when switching to <tt class="literal"><span class="pre">Tab</span></tt> to set the <a class="reference" href="#indentamount">IndentAmount</a>, or you will end up with four tabs!</p>
<p>VB(VBCodeModule):</p>
<pre class="literal-block">
' VB2PY-Set: General.IndentCharacter = Tab
    If a = 10 Then
            b = 1
    Else
            b = 2
    End If
' VB2PY-Unset: General.IndentCharacter
</pre>
</div>
<div class="section" id="indentamount">
<h2><a name="indentamount">IndentAmount</a></h2>
<p>Syntax: <tt class="literal"><span class="pre">IndentAmount</span> <span class="pre">=</span> <span class="pre">&lt;integer&gt;</span></tt></p>
<pre class="literal-block">
# Space or Tab
IndentAmount = 4        
</pre>
<p>Sets the number of <a class="reference" href="#indentcharacter">IndentCharacter</a> 's to be used to indent code blocks.</p>
<p>The default is 4.</p>
<p>VB(VBCodeModule):</p>
<pre class="literal-block">
' VB2PY-Set: General.IndentAmount = 4
    If a = 10 Then
            b = 1
    Else
            b = 2
    End If
' VB2PY-Unset: General.IndentAmount
</pre>
<p>Other values are allowed.</p>
<p>VB(VBCodeModule):</p>
<pre class="literal-block">
' VB2PY-Set: General.IndentAmount = 8
    If a = 10 Then
            b = 1
    Else
            b = 2
    End If
' VB2PY-Unset: General.IndentAmount
</pre>
</div>
<div class="section" id="attentionmarker">
<h2><a name="attentionmarker">AttentionMarker</a></h2>
<p>Syntax: <tt class="literal"><span class="pre">AttentionMarker</span> <span class="pre">=</span> <span class="pre">&lt;string&gt;</span></tt></p>
<pre class="literal-block">
# Marker to use when code needs user attention
AttentionMarker = VB2PY                         
</pre>
<p>Sets the marker to use in comments when highlighting part of the converted code that needs attention.</p>
<p>The default is VB2PY.</p>
<p>VB(VBCodeModule):</p>
<pre class="literal-block">
' VB2PY-Set: General.AttentionMarker = VB2PY
    On Error Goto 0
' VB2PY-Unset: General.AttentionMarker
</pre>
<p>Other values are allowed.</p>
<p>VB(VBCodeModule):</p>
<pre class="literal-block">
' VB2PY-Set: General.AttentionMarker = TODO
    On Error Goto 0
' VB2PY-Unset: General.AttentionMarker
</pre>
</div>
<div class="section" id="warnaboutunrenderedcode">
<h2><a name="warnaboutunrenderedcode">WarnAboutUnrenderedCode</a></h2>
<p>Syntax: <tt class="literal"><span class="pre">WarnAboutUnrenderedCode</span> <span class="pre">=</span> <span class="pre">Yes</span> <span class="pre">|</span> <span class="pre">No</span></tt></p>
<pre class="literal-block">
# Yes or No
WarnAboutUnrenderedCode = Yes   
</pre>
<p>Determined whether an <a class="reference" href="#attentionmarker">AttentionMarker</a> is inserted in the Python code to highligh VB code which has not been rendered.</p>
<p>The default is Yes.</p>
<p>VB(VBCodeModule):</p>
<pre class="literal-block">
' VB2PY-Set: General.WarnAboutUnrenderedCode = Yes
    On Error Goto 0
' VB2PY-Unset: General.WarnAboutUnrenderedCode
</pre>
<p>Other values are allowed.</p>
<p>VB(VBCodeModule):</p>
<pre class="literal-block">
' VB2PY-Set: General.WarnAboutUnrenderedCode = No
    On Error Goto 0
' VB2PY-Unset: General.WarnAboutUnrenderedCode
</pre>
</div>
<div class="section" id="loaduserplugins">
<h2><a name="loaduserplugins">LoadUserPlugins</a></h2>
<p>Syntax: <tt class="literal"><span class="pre">LoadUserPlugins</span> <span class="pre">=</span> <span class="pre">Yes</span> <span class="pre">|</span> <span class="pre">No</span></tt></p>
<pre class="literal-block">
# Yes or No, whether to use user plugins or not. If No, system plugins will still work
LoadUserPlugins = No
</pre>
<p>Determines whether user plug-ins are loaded and executed during the normal code conversion process. User plug-ins are kept in the <tt class="literal"><span class="pre">extensions</span></tt> folder of the <tt class="literal"><span class="pre">vb2py</span></tt> directory. System plug-ins are also located in this folder but are not affected by the value of this setting.</p>
</div>
<div class="section" id="logginglevel">
<h2><a name="logginglevel">LoggingLevel</a></h2>
<p>Syntax: <tt class="literal"><span class="pre">LoggingLevel</span> <span class="pre">=</span> <span class="pre">&lt;integer&gt;</span></tt></p>
<pre class="literal-block">
# Default logging level, 0 is nothing
LoggingLevel = 0
</pre>
<p>Sets the default logging level to use during the code conversion. If this is set to 0 then no logging messages will be output. The logging levels are defined in the standard Python logging module.</p>
</div>
<div class="section" id="dumpformdata">
<h2><a name="dumpformdata">DumpFormData</a></h2>
<p>Syntax: <tt class="literal"><span class="pre">DumpFormData</span> <span class="pre">=</span> <span class="pre">Yes</span> <span class="pre">|</span> <span class="pre">No</span></tt></p>
<pre class="literal-block">
# Yes or No, whether to dump form data to screen - Yes seems to crash the GUI!
DumpFormData = No
</pre>
<p>If this is set to <tt class="literal"><span class="pre">Yes</span></tt> then the form classes will be dumped to the screen during form conversion. This may be useful if there is a problem during the conversion process.</p>
<p>The default is No.</p>
</div>
<div class="section" id="respectprivatestatus">
<h2><a name="respectprivatestatus">RespectPrivateStatus</a></h2>
<p>Syntax: <tt class="literal"><span class="pre">RespectPrivateStatus</span> <span class="pre">=</span> <span class="pre">Yes</span> <span class="pre">|</span> <span class="pre">No</span></tt></p>
<pre class="literal-block">
# Yes or No, whether to respect Private status of variables
RespectPrivateStatus = Yes
</pre>
<p>If this variable is set to <tt class="literal"><span class="pre">Yes</span></tt> then variables, subroutines and functions in VB which are either explicitely or implicitely <tt class="literal"><span class="pre">Private</span></tt> will have their Python names converted to have a <a class="reference" href="#privatedataprefix">PrivateDataPrefix</a>. Setting this variable to <tt class="literal"><span class="pre">No</span></tt> will ignore the <tt class="literal"><span class="pre">Private</span></tt> status of all variables.</p>
<p>The default is Yes.</p>
<p>VB(VBClassModule):</p>
<pre class="literal-block">
' VB2PY-GlobalSet: General.RespectPrivateStatus = Yes
Public Name As String
Public Age As Single
Private ID As Long

Public Sub checkAge()
    If Age = 0 Then Age = 1
End Sub
'
Private Sub setUp()
    ID = Rnd()
    If ID = 0 Then setUp
End Sub
' VB2PY-Unset: General.RespectPrivateStatus
</pre>
<p>An example with No.</p>
<p>VB(VBClassModule):</p>
<pre class="literal-block">
' VB2PY-GlobalSet: General.RespectPrivateStatus = No
Public Name As String
Public Age As Single
Private ID As Long

Public Sub checkAge()
    If Age = 0 Then Age = 1
End Sub
'
Private Sub setUp()
    ID = Rnd()
    If ID = 0 Then setUp
End Sub
' VB2PY-Unset: General.RespectPrivateStatus
</pre>
</div>
<div class="section" id="privatedataprefix">
<h2><a name="privatedataprefix">PrivateDataPrefix</a></h2>
<p>Syntax: <tt class="literal"><span class="pre">PrivateDataPrefix</span> <span class="pre">=</span> <span class="pre">&lt;string&gt;</span></tt></p>
<pre class="literal-block">
# Prefix to use to tag data as private (Python normally uses __ but VB convention is m_)
PrivateDataPrefix = __
</pre>
<p>If <a class="reference" href="#respectprivatestatus">RespectPrivateStatus</a> is set to <tt class="literal"><span class="pre">Yes</span></tt> then variables, subroutines and functions in VB which are either explicitely or implicitely <tt class="literal"><span class="pre">Private</span></tt> will have their Python names converted to have a prefix and this setting determines what that prefix will be.</p>
<p>The default is ___.</p>
<p>VB(VBClassModule):</p>
<pre class="literal-block">
' VB2PY-GlobalSet: General.PrivateDataPrefix = prv
Public Name As String
Public Age As Single
Private ID As Long

Public Sub checkAge()
    If Age = 0 Then Age = 1
End Sub
'
Private Sub setUp()
    ID = Rnd()
    If ID = 0 Then setUp
End Sub
' VB2PY-Unset: General.PrivateDataPrefix
</pre>
<p>If the value used is not &quot;__&quot; then the data will not be hidden as far as Python is concerned.</p>
<p>VB(VBClassModule):</p>
<pre class="literal-block">
' VB2PY-GlobalSet: General.PrivateDataPrefix = m_
Public Name As String
Public Age As Single
Private ID As Long

Public Sub checkAge()
    If Age = 0 Then Age = 1
End Sub
'
Private Sub setUp()
    ID = Rnd()
    If ID = 0 Then setUp
End Sub
' VB2PY-Unset: General.PrivateDataPrefix
</pre>
</div>
<div class="section" id="alwaysuserawstringliterals">
<h2><a name="alwaysuserawstringliterals">AlwaysUseRawStringLiterals</a></h2>
<p>Syntax: <tt class="literal"><span class="pre">AlwaysUseRawStringLiterals</span> <span class="pre">=</span> <span class="pre">Yes</span> <span class="pre">|</span> <span class="pre">No</span></tt></p>
<pre class="literal-block">
# Yes or No, whether to use raw strings for all literals - very safe but not necessarily good looking!
AlwaysUseRawStringLiterals = No
</pre>
<p>By default, all VB strings are just converted to Python strings. However, if the VB string contains the backslash character then it is quite likely that the Python version will not be the same since Python will interpret the backslash as a control character. Setting the <tt class="literal"><span class="pre">AlwaysUseRawStringLiterals</span></tt> option to <tt class="literal"><span class="pre">Yes</span></tt> will cause all VB strings to be converted to raw Python strings (r&quot;string&quot;), which will prevent such problems.</p>
<p>The default is No.</p>
<p>VB(VBCodeModule):</p>
<pre class="literal-block">
' VB2PY-GlobalSet: General.AlwaysUseRawStringLiterals = No
myString = &quot;a\path\name&quot;
' VB2PY-Unset: General.AlwaysUseRawStringLiterals
</pre>
<p>Setting the option to <tt class="literal"><span class="pre">Yes</span></tt> is safe but doesn't always look good in the code.</p>
<p>VB(VBCodeModule):</p>
<pre class="literal-block">
' VB2PY-GlobalSet: General.AlwaysUseRawStringLiterals = Yes
myString = &quot;a\path\name&quot;
' VB2PY-Unset: General.AlwaysUseRawStringLiterals
</pre>
</div>
<div class="section" id="trytoextractdocstrings">
<h2><a name="trytoextractdocstrings">TryToExtractDocStrings</a></h2>
<p>Syntax: <tt class="literal"><span class="pre">TryToExtractDocStrings</span> <span class="pre">=</span> <span class="pre">Yes</span> <span class="pre">|</span> <span class="pre">No</span></tt></p>
<pre class="literal-block">
# Yes or No, whether to try to automatically extract docstrings from the code
TryToExtractDocStrings = Yes
</pre>
<p>If <tt class="literal"><span class="pre">TryToExtractDocStrings</span></tt> is set then any contiguous block of comment lines found at the start of a module are interpretted as a docstring and added to the class definition. The docstring terminates with the first non-comment line.</p>
<p>The default is <tt class="literal"><span class="pre">No</span></tt>.</p>
<p>VB(VBCodeModule):</p>
<pre class="literal-block">
' VB2PY-GlobalSet: General.TryToExtractDocStrings = No
    ' This is the documentation for the module
    ' This line is also documentation
    ' So is this one
    ' And this is the last

Public Name As String
Public Age As Single
Private ID As Long

Public Sub checkAge()
    If Age = 0 Then Age = 1
End Sub
'
Private Sub setUp()
    ID = Rnd()
    If ID = 0 Then setUp
End Sub
' VB2PY-Unset: General.TryToExtractDocStrings
</pre>
<p>When the option is <tt class="literal"><span class="pre">Yes</span></tt> docstrings will be created.</p>
<p>VB(VBCodeModule):</p>
<pre class="literal-block">
' VB2PY-GlobalSet: General.TryToExtractDocStrings = Yes
    ' This is the documentation for the module
    ' This line is also documentation
    ' So is this one
    ' And this is the last

Public Name As String
Public Age As Single
Private ID As Long

Public Sub checkAge()
    If Age = 0 Then Age = 1
End Sub
'
Private Sub setUp()
    ID = Rnd()
    If ID = 0 Then setUp
End Sub
' VB2PY-Unset: General.TryToExtractDocStrings
</pre>
</div>
<div class="section" id="reportpartialconversion">
<h2><a name="reportpartialconversion">ReportPartialConversion</a></h2>
<p>Syntax: <tt class="literal"><span class="pre">ReportPartialConversion</span> <span class="pre">=</span> <span class="pre">Yes</span> <span class="pre">|</span> <span class="pre">No</span></tt></p>
<pre class="literal-block">
# Yes or No, whether to return a partially converted file when an error is found
ReportPartialConversion = Yes
</pre>
<p>This option is used to determine what happens when the conversion fails for some reason. If the option is set to <tt class="literal"><span class="pre">Yes</span></tt> then the conversion will return as much code as it can. If the option is set to <tt class="literal"><span class="pre">No</span></tt> then the conversion will just fail and return nothing at all.</p>
<p>The default is <tt class="literal"><span class="pre">Yes</span></tt>.</p>
<p>VB(VBCodeModule):</p>
<pre class="literal-block">
 ' VB2PY-Set: General.ReportPartialConversion = Yes
     a = 10
     b = 20
     c = 30
     something that wont convert
     d = 40
     e = 50
' VB2PY-Unset: General.ReportPartialConversion
</pre>
<p>When the option is <tt class="literal"><span class="pre">No</span></tt> you wont get any output if there is an error.</p>
<p>VB(VBCodeModule):</p>
<pre class="literal-block">
 ' VB2PY-Set: General.ReportPartialConversion = No
     a = 10
     b = 20
     c = 30
     something that wont convert
     d = 40
     e = 50
' VB2PY-Unset: General.ReportPartialConversion
</pre>
</div>
<div class="section" id="includedebugcode">
<h2><a name="includedebugcode">IncludeDebugCode</a></h2>
<p>Syntax: <tt class="literal"><span class="pre">IncludeDebugCode</span> <span class="pre">=</span> <span class="pre">Yes</span> <span class="pre">|</span> <span class="pre">No</span></tt></p>
<pre class="literal-block">
# Yes or No, whether to include debug code in the converted application
IncludeDebugCode = No
</pre>
<p>This option is used to determine whether debug code is included in the converted application. If the option is <tt class="literal"><span class="pre">Yes</span></tt> then a <tt class="literal"><span class="pre">from</span> <span class="pre">vbdebug</span> <span class="pre">import</span> <span class="pre">*</span></tt> will be inserted at the top of each module. <tt class="literal"><span class="pre">vbdebug</span></tt> includes code to access the logger and is required if you need to view the output from <tt class="literal"><span class="pre">Debug.Print</span></tt> statements.</p>
<p>The default is <tt class="literal"><span class="pre">No</span></tt>.</p>
<p>VB(VBCodeModule):</p>
<pre class="literal-block">
 ' VB2PY-Set: General.IncludeDebugCode = No
     a = 10
     b = 20
     c = 30
' VB2PY-Unset: General.IncludeDebugCode
</pre>
<p>When the option is <tt class="literal"><span class="pre">Yes</span></tt> you get the extra <tt class="literal"><span class="pre">import</span></tt> statement</p>
<p>VB(VBCodeModule):</p>
<pre class="literal-block">
 ' VB2PY-Set: General.IncludeDebugCode = Yes
     a = 10
     b = 20
     c = 30
' VB2PY-Unset: General.IncludeDebugCode
</pre>
</div>
</div>
<div class="section" id="functions">
<h1><a name="functions">Functions</a></h1>
<p>The list of all <tt class="literal"><span class="pre">Function</span></tt> options is shown in the following table:</p>
<pre class="literal-block">
[Functions]
# Name of variable used in Functions
ReturnVariableName = _ret             
# Yes or No, leave at Yes unless good reasons!
PreInitializeReturnVariable = Yes     
</pre>
<div class="section" id="returnvariablename">
<h2><a name="returnvariablename">ReturnVariableName</a></h2>
<p>Syntax: <tt class="literal"><span class="pre">ReturnVariableName</span> <span class="pre">=</span> <span class="pre">&lt;string&gt;</span></tt></p>
<pre class="literal-block">
# Name of variable used in Functions
ReturnVariableName = _ret             
</pre>
<p>This option allows the return variable name to be specified. No checking is done to ensure that the name does not clash with local or global variables, so care should be taken when selecting a suitable name.</p>
<p>VB:</p>
<pre class="literal-block">
Dim moduleGlobal1, moduleGlobal2

' VB2PY-GlobalSet: Functions.ReturnVariableName = _MyFunc
Function MyFunc(X, Optional Y, Optional Z=20)
    Dim subLocal
    subLocal = X + Y + Z + moduleGlobal
    moduleGlobal2 = moduleGlobal2 + 1
    MyFunc = subLocal*10
End Function
' VB2PY-Unset: Functions.ReturnVariableName 

a = MyFunc(1, 2)
a = MyFunc(1, Z:=10)
</pre>
</div>
<div class="section" id="preinitializereturnvariable">
<h2><a name="preinitializereturnvariable">PreInitializeReturnVariable</a></h2>
<p>Syntax: <tt class="literal"><span class="pre">PreInitializeReturnVariable</span> <span class="pre">=</span> <span class="pre">Yes</span> <span class="pre">|</span> <span class="pre">No</span></tt></p>
<pre class="literal-block">
# Yes or No, leave at Yes unless good reasons!
PreInitializeReturnVariable = Yes     
</pre>
<p>By default the return variable is initialized to <tt class="literal"><span class="pre">None</span></tt> at the start of the function so that an error does not occur in the event that the function returns before the return variable has been assigned to. This option allows this initialization step to be omitted and is safe as long as all return paths from the function include an explicit assignment to the return value variable.</p>
<p>VB:</p>
<pre class="literal-block">
Dim moduleGlobal1, moduleGlobal2

' VB2PY-GlobalSet: Functions.PreInitializeReturnVariable = Yes
Function MyFunc(X, Optional Y, Optional Z=20)
    Dim subLocal
    subLocal = X + Y + Z + moduleGlobal
    moduleGlobal2 = moduleGlobal2 + 1
    MyFunc = subLocal*10
End Function
' VB2PY-Unset: Functions.PreInitializeReturnVariable 

a = MyFunc(1, 2)
a = MyFunc(1, Z:=10)
</pre>
<p>Compare this with,</p>
<p>VB:</p>
<pre class="literal-block">
Dim moduleGlobal1, moduleGlobal2

' VB2PY-GlobalSet: Functions.PreInitializeReturnVariable = No
Function MyFunc(X, Optional Y, Optional Z=20)
    Dim subLocal
    subLocal = X + Y + Z + moduleGlobal
    moduleGlobal2 = moduleGlobal2 + 1
    MyFunc = subLocal*10
End Function
' VB2PY-Unset: Functions.PreInitializeReturnVariable 

a = MyFunc(1, 2)
a = MyFunc(1, Z:=10)
</pre>
</div>
</div>
<div class="section" id="select">
<h1><a name="select">Select</a></h1>
<p>The list of all <tt class="literal"><span class="pre">Select</span></tt> options is shown in the following table:</p>
<pre class="literal-block">
[Select]
# Once or EachTime, how many times to evaluate the case variable  
EvaluateVariable = Once
# Name of select variable (only used if EvaluateVariable is Once)
SelectVariablePrefix = _select
# Yes or No, use numeric index on select variable (needed if you every have nested Selects and EvaluateVariable = Once)
UseNumericIndex = Yes
</pre>
<div class="section" id="evaluatevariable">
<h2><a name="evaluatevariable">EvaluateVariable</a></h2>
<p>Syntax: <tt class="literal"><span class="pre">EvaluateVariable</span> <span class="pre">=</span> <span class="pre">Yes</span> <span class="pre">|</span> <span class="pre">No</span></tt></p>
<pre class="literal-block">
# Once or EachTime, how many times to evaluate the case variable  
EvaluateVariable = Once
</pre>
<p>The default behaviour when converting a <tt class="literal"><span class="pre">Select</span></tt> is to evaluate the select expression once at the start of the block. By setting this option to <tt class="literal"><span class="pre">EachTime</span></tt> you can force the expression to be evaluated for each <tt class="literal"><span class="pre">if/elif</span></tt> statement. This generally looks cleaner but can lead to undesired side effects or slow run times depending on how expensive the expression is to calculate.</p>
<p>VB:</p>
<pre class="literal-block">
' VB2PY-Set: Select.EvaluateVariable = Once
Select Case Value
    Case 1
        DoOne
    Case 2
        DoTwo
    Case 3, 4
        DoThreeOrFour
    Case 5 To 10
        DoFiveToTen
    Case Else
        DoElse
End Select
' VB2PY-Unset: Select.EvaluateVariable
</pre>
<p>Compare this to,</p>
<p>VB:</p>
<pre class="literal-block">
' VB2PY-Set: Select.EvaluateVariable = EachTime
Select Case Value
    Case 1
        DoOne
    Case 2
        DoTwo
    Case 3, 4
        DoThreeOrFour
    Case 5 To 10
        DoFiveToTen
    Case Else
        DoElse
End Select
' VB2PY-Unset: Select.EvaluateVariable
</pre>
</div>
<div class="section" id="selectvariableprefix">
<h2><a name="selectvariableprefix">SelectVariablePrefix</a></h2>
<p>Syntax: <tt class="literal"><span class="pre">SelectVariablePrefix</span> <span class="pre">=</span> <span class="pre">&lt;string&gt;</span></tt></p>
<pre class="literal-block">
# Name of select variable (only used if EvaluateVariable is Once)
SelectVariablePrefix = _select
</pre>
<p>When <a class="reference" href="#evaluatevariable">EvaluateVariable</a> is set to <tt class="literal"><span class="pre">Once</span></tt>, this option determines the prefix used to name the variable used in the select. If <a class="reference" href="#usenumericindex">UseNumericIndex</a> is set to <tt class="literal"><span class="pre">No</span></tt> then this option sets the variable name used, otherwise this is the prefix and the final variable will also include a unique ID number.</p>
<p>VB:</p>
<pre class="literal-block">
' VB2PY-Set: Select.SelectVariablePrefix = selectVariable
Select Case Value
    Case 1
        DoOne
    Case 2
        DoTwo
    Case 3, 4
        DoThreeOrFour
    Case 5 To 10
        DoFiveToTen
    Case Else
        DoElse
End Select
' VB2PY-Unset: Select.SelectVariablePrefix
</pre>
</div>
<div class="section" id="usenumericindex">
<h2><a name="usenumericindex">UseNumericIndex</a></h2>
<p>Syntax: <tt class="literal"><span class="pre">UseNumericIndex</span> <span class="pre">=</span> <span class="pre">Yes</span> <span class="pre">|</span> <span class="pre">No</span></tt></p>
<pre class="literal-block">
# Yes or No, use numeric index on select variable (needed if you every have nested Selects and EvaluateVariable = Once)
UseNumericIndex = Yes
</pre>
<p>When <a class="reference" href="#evaluatevariable">EvaluateVariable</a> is set to <tt class="literal"><span class="pre">Once</span></tt>, this option determines whether a unique ID number is appended to the <a class="reference" href="#selectvariableprefix">SelectVariablePrefix</a> to determine the variable name used to hold the select expression. If used, the index is incremented for each <tt class="literal"><span class="pre">select</span></tt> constuct found. This option is always required to be <tt class="literal"><span class="pre">Yes</span></tt> where the code includes nested <tt class="literal"><span class="pre">Select</span></tt> blocks <em>and</em> <a class="reference" href="#evaluatevariable">EvaluateVariable</a> is set to <tt class="literal"><span class="pre">Once</span></tt>. If neither of these conditions applies then it is safe to set this to <tt class="literal"><span class="pre">No</span></tt></p>
<p>VB:</p>
<pre class="literal-block">
' VB2PY-Set: Select.UseNumericIndex = Yes
Select Case Value
    Case 1
        DoOne
    Case 2
        DoTwo
    Case 3, 4
        DoThreeOrFour
    Case 5 To 10
        DoFiveToTen
    Case Else
        DoElse
End Select
' VB2PY-Unset: Select.UseNumericIndex
</pre>
<p>Comapre this to,</p>
<p>VB:</p>
<pre class="literal-block">
' VB2PY-Set: Select.UseNumericIndex = No
Select Case Value
    Case 1
        DoOne
    Case 2
        DoTwo
    Case 3, 4
        DoThreeOrFour
    Case 5 To 10
        DoFiveToTen
    Case Else
        DoElse
End Select
' VB2PY-Unset: Select.UseNumericIndex
</pre>
</div>
</div>
<div class="section" id="labels">
<h1><a name="labels">Labels</a></h1>
<p>The list of all <tt class="literal"><span class="pre">Labels</span></tt> options is shown in the following table:</p>
<pre class="literal-block">
[Labels]
# Yes or No, ignore labels completely
IgnoreLabels = Yes
</pre>
<div class="section" id="ignorelabels">
<h2><a name="ignorelabels">IgnoreLabels</a></h2>
<p>Syntax: <tt class="literal"><span class="pre">IgnoreLabels</span> <span class="pre">=</span> <span class="pre">Yes</span> <span class="pre">|</span> <span class="pre">No</span></tt></p>
<pre class="literal-block">
# Yes or No, ignore labels completely
IgnoreLabels = Yes
</pre>
<p>Labels are not supported in vb2Py v0.2. If you have VB code with labels on every line then you will get a huge number of attention markers telling you that the label was not converted. You can silence these warning by setting the <tt class="literal"><span class="pre">IgnoreLabels</span></tt> option to <tt class="literal"><span class="pre">Yes</span></tt>.</p>
<p>VB:</p>
<pre class="literal-block">
' VB2PY-Set: Labels.IgnoreLabels = No
    10: a=1
    20: b=2
    30: c=3
' VB2PY-Unset: Labels.IgnoreLabels
</pre>
<p>Comapre this to,</p>
<p>VB:</p>
<pre class="literal-block">
' VB2PY-Set: Labels.IgnoreLabels = Yes
    10: a=1
    20: b=2
    30: c=3
' VB2PY-Unset: Labels.IgnoreLabels
</pre>
</div>
</div>
<div class="section" id="with">
<h1><a name="with">With</a></h1>
<p>The list of all <tt class="literal"><span class="pre">With</span></tt> options is shown in the following table:</p>
<pre class="literal-block">
[With]
# Once or EachTime, how many times to evaluate the with variable  
EvaluateVariable = Once
# Name of with variable (only used if EvaluateVariable is Once)
WithVariablePrefix = _with
# Yes or No, use numeric index on with variable (needed if you every have nested Withs and EvaluateVariable = Once)
UseNumericIndex = Yes
</pre>
<div class="section" id="with-evaluatevariable">
<h2><a name="with-evaluatevariable">With EvaluateVariable</a></h2>
<p>Syntax: <tt class="literal"><span class="pre">EvaluateVariable</span> <span class="pre">=</span> <span class="pre">Yes</span> <span class="pre">|</span> <span class="pre">No</span></tt></p>
<pre class="literal-block">
[With]
# Once or EachTime, how many times to evaluate the with variable  
</pre>
<p>The default behaviour is to evaluate the <tt class="literal"><span class="pre">With</span></tt> object once at the start of the block. By setting this option to <tt class="literal"><span class="pre">EachTime</span></tt> you can force the object to be evaluated each time it is required. This generally looks more natural but can lead to undesired side effects or slow run times depending on how expensive <a href="#id2" name="id3"><span class="problematic" id="id3">[1]_</span></a> the object is to calculate.</p>
<p>VB:</p>
<pre class="literal-block">
' VB2PY-Set: With.EvaluateVariable = Once
With MyObject
    .Height = 10
    .Width = .Height * .ScaleFactor
End With
' VB2PY-Unset: With.EvaluateVariable
</pre>
<p>Compare this to,</p>
<p>VB:</p>
<pre class="literal-block">
' VB2PY-Set: With.EvaluateVariable = EveryTime
With MyObject
    .Height = 10
    .Width = .Height * .ScaleFactor
End With
' VB2PY-Unset: With.EvaluateVariable
</pre>
</div>
<div class="section" id="withvariableprefix">
<h2><a name="withvariableprefix">WithVariablePrefix</a></h2>
<p>Syntax: <tt class="literal"><span class="pre">WithVariablePrefix</span> <span class="pre">=</span> <span class="pre">&lt;string&gt;</span></tt></p>
<pre class="literal-block">
# Name of with variable (only used if EvaluateVariable is Once)
WithVariablePrefix = _select
</pre>
<p>When <a class="reference" href="#with-evaluatevariable">With EvaluateVariable</a> is set to <tt class="literal"><span class="pre">Once</span></tt>, this option determines the prefix used to name the variable used in the <tt class="literal"><span class="pre">With</span></tt>. If <a class="reference" href="#with-usenumericindex">With UseNumericIndex</a> is set to <tt class="literal"><span class="pre">No</span></tt> then this option sets the variable name used, otherwise this is the prefix and the final variable will also include a unique ID number.</p>
<p>VB:</p>
<pre class="literal-block">
' VB2PY-Set: With.WithVariablePrefix = withVariable
With MyObject
    .Height = 10
    .Width = .Height * .ScaleFactor
End With
' VB2PY-Unset: With.WithVariablePrefix
</pre>
</div>
<div class="section" id="with-usenumericindex">
<h2><a name="with-usenumericindex">With UseNumericIndex</a></h2>
<p>Syntax: <tt class="literal"><span class="pre">UseNumericIndex</span> <span class="pre">=</span> <span class="pre">Yes</span> <span class="pre">|</span> <span class="pre">No</span></tt></p>
<pre class="literal-block">
# Yes or No, use numeric index on select variable (needed if you every have nested Selects and EvaluateVariable = Once)
UseNumericIndex = Yes
</pre>
<p>When <a class="reference" href="#with-evaluatevariable">With EvaluateVariable</a> is set to <tt class="literal"><span class="pre">Once</span></tt>, this option determines whether a unique ID number is appended to the <a class="reference" href="#withvariableprefix">WithVariablePrefix</a> to determine the variable name used to hold the object. If used, the index is incremented for each <tt class="literal"><span class="pre">With</span></tt> constuct found. This option is always required to be <tt class="literal"><span class="pre">Yes</span></tt> where the code includes nested <tt class="literal"><span class="pre">With</span></tt> blocks <em>and</em> <a class="reference" href="#with-evaluatevariable">With EvaluateVariable</a> is set to <tt class="literal"><span class="pre">Once</span></tt>. If neither of these conditions applies then it is safe to set this to <tt class="literal"><span class="pre">No</span></tt></p>
<p>VB:</p>
<pre class="literal-block">
' VB2PY-Set: With.UseNumericIndex = No
With MyObject
    .Height = 10
    .Width = .Height * .ScaleFactor
End With
' VB2PY-Unset: With.UseNumericIndex
</pre>
<p>Compare this to,</p>
<p>VB:</p>
<pre class="literal-block">
' VB2PY-Set: With.UseNumericIndex = Yes
With MyObject
    .Height = 10
    .Width = .Height * .ScaleFactor
End With
' VB2PY-Unset: With.UseNumericIndex
</pre>
</div>
</div>
<div class="section" id="properties">
<h1><a name="properties">Properties</a></h1>
<p>The list of all <tt class="literal"><span class="pre">Property</span></tt> options is shown in the following table:</p>
<pre class="literal-block">
[Properties]
# Prefix to add to property Let/Set function name
LetSetVariablePrefix = set
# Prefix to add to property Get function name
GetVariablePrefix = get
</pre>
<div class="section" id="letsetvariableprefix">
<h2><a name="letsetvariableprefix">LetSetVariablePrefix</a></h2>
<p>Syntax: <tt class="literal"><span class="pre">LetSetVariablePrefix</span> <span class="pre">=</span> <span class="pre">&lt;string&gt;</span></tt></p>
<pre class="literal-block">
# Prefix to add to property Let/Set function name
LetSetVariablePrefix = set
</pre>
<p>In class modules where properties are defined, vb2Py creates <tt class="literal"><span class="pre">get</span></tt> and <tt class="literal"><span class="pre">set</span></tt> methods to access and assign to the property. Since VB uses a syntactic form to distinguish between the getters and setters but Python uses different names with the same syntax there is a need to automatically generate a name for the <tt class="literal"><span class="pre">get</span></tt> and <tt class="literal"><span class="pre">set</span></tt> methods. The <tt class="literal"><span class="pre">getter</span></tt> and <tt class="literal"><span class="pre">setter</span></tt> methods are determined by the <a class="reference" href="#letsetvariableprefix">LetSetVariablePrefix</a> and <a class="reference" href="#getvariableprefix">GetVariablePrefix</a> respectively.</p>
<p>VB:</p>
<pre class="literal-block">
' VB2PY-Set: Properties.LetSetVariablePrefix = doSet_
Dim mName As String
Dim mAge As Single

Public Property Let Name(Value)
    mName = Value
End Property
'
Public Property Get Name()
    Name = mName
End Property

' VB2PY-Unset: Properties.LetSetVariablePrefix
</pre>
</div>
<div class="section" id="getvariableprefix">
<h2><a name="getvariableprefix">GetVariablePrefix</a></h2>
<p>Syntax: <tt class="literal"><span class="pre">GetVariablePrefix</span> <span class="pre">=</span> <span class="pre">&lt;string&gt;</span></tt></p>
<pre class="literal-block">
# Prefix to add to property Get function name
GetVariablePrefix = set
</pre>
<p>In class modules where properties are defined, vb2Py creates <tt class="literal"><span class="pre">get</span></tt> and <tt class="literal"><span class="pre">set</span></tt> methods to access and assign to the property. Since VB uses a syntactic form to distinguish between the getters and setters but Python uses different names with the same syntax there is a need to automatically generate a name for the <tt class="literal"><span class="pre">get</span></tt> and <tt class="literal"><span class="pre">set</span></tt> methods. The <tt class="literal"><span class="pre">getter</span></tt> and <tt class="literal"><span class="pre">setter</span></tt> methods are determined by the <a class="reference" href="#letsetvariableprefix">LetSetVariablePrefix</a> and <a class="reference" href="#getvariableprefix">GetVariablePrefix</a> respectively.</p>
<p>VB:</p>
<pre class="literal-block">
' VB2PY-Set: Properties.GetVariablePrefix = doGet_
Dim mName As String
Dim mAge As Single

Public Property Let Name(Value)
    mName = Value
End Property
'
Public Property Get Name()
    Name = mName
End Property

' VB2PY-Unset: Properties.GetVariablePrefix
</pre>
</div>
</div>
<div class="section" id="classes">
<h1><a name="classes">Classes</a></h1>
<p>The list of all <tt class="literal"><span class="pre">Class</span></tt> options is shown in the following table:</p>
<pre class="literal-block">
[Classes]
# Yes or No, whether to use new style classes for all classes
UseNewStyleClasses = Yes
</pre>
<div class="section" id="usenewstyleclasses">
<h2><a name="usenewstyleclasses">UseNewStyleClasses</a></h2>
<p>Syntax: <tt class="literal"><span class="pre">UseNewStyleClasses</span> <span class="pre">=</span> <span class="pre">Yes</span> <span class="pre">|</span> <span class="pre">No</span></tt></p>
<pre class="literal-block">
# Yes or No, whether to use new style classes for all classes
UseNewStyleClasses = Yes
</pre>
<p>By default, all classes are created as <em>new style</em> Python classes (inheriting from <tt class="literal"><span class="pre">Object</span></tt>). Old style classes can be created by setting the <tt class="literal"><span class="pre">UseNewStyleClasses</span></tt> option to <tt class="literal"><span class="pre">No</span></tt>.</p>
<p>VB(VBClassModule):</p>
<pre class="literal-block">
' VB2PY-GlobalSet: Classes.UseNewStyleClasses = Yes
Public Name As String
Public Age As Single
Private ID As Long

Public Sub checkAge()
    If Age = 0 Then Age = 1
End Sub
'
Private Sub setUp()
    ID = Rnd()
    If ID = 0 Then setUp
End Sub
' VB2PY-Unset: Classes.UseNewStyleClasses 
</pre>
<p>Compare this to,</p>
<p>VB(VBClassModule):</p>
<pre class="literal-block">
' VB2PY-GlobalSet: Classes.UseNewStyleClasses = No
Public Name As String
Public Age As Single
Private ID As Long

Public Sub checkAge()
    If Age = 0 Then Age = 1
End Sub
'
Private Sub setUp()
    ID = Rnd()
    If ID = 0 Then setUp
End Sub
' VB2PY-Unset: Classes.UseNewStyleClasses 
</pre>
</div>
</div>
<div class="system-messages section">
<h1><a>Docutils System Messages</a></h1>
<div class="system-message" id="id2">
<p class="system-message-title">System Message: <a name="id2">ERROR/3</a> (<tt>&lt;string&gt;</tt>, line 845); <em><a href="#id3">backlink</a></em></p>
Unknown target name: &quot;1&quot;.</div>
</div>
</div>
</body>
</html>
