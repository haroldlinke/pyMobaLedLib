#@+leo-ver=4
#@+node:@file vb2py.ini
#@+others
#@+node:General

[General]
# Space or Tab
IndentCharacter = Space	
# Number of spaces/tabs					
IndentAmount = 4							 
# Marker to use when code needs user attention
AttentionMarker = VB2PY				
# Yes or No
WarnAboutUnrenderedCode = Yes	
# Yes or No, whether to use user plugins or not. If No, system plugins will still work
LoadUserPlugins = Yes
# Default logging level, 0 is nothing
LoggingLevel = 1
# Yes or No, whether to dump form data to screen - Yes seems to crash the GUI!
DumpFormData = No
# Yes or No, whether the full VB parser is used to convert code
UseFullParser = Yes
# Yes or No, whether to respect Private status of variables
RespectPrivateStatus = Yes
# Prefix to use to tag data as private (Python normally uses __ but VB convention is m_)
PrivateDataPrefix = __
# Yes or No, whether to use raw strings for all literals - very safe but not necessarily good looking!
AlwaysUseRawStringLiterals = No
# Yes or No, whether to try to automatically extract docstrings from the code
TryToExtractDocStrings = Yes
# Yes or No, whether to return a partially converted file when an error is found
ReportPartialConversion = Yes
# Exception, Warning, Comment - what to insert into code when parsing fails
InsertIntoFailedCode = Comment
# Yes or No, whether to include debug code in the converted application
IncludeDebugCode = Yes
# Which controls to use VB style PythonCard control classes for
UseVBPythonCardControls = Button, StaticText, TextField, TextArea, ComboBox, ListBox, CheckBox, BitmapCanvas, TreeView, ImageList, Timer
# Yes or No, whether to overwrite existing files
OverwriteFiles = No
# Yes or No, whether to return a lookup between VB and Python line numbers during conversion
ReturnLineNumbers = No
# None
#@nonl
#@-node:General
#@+node:Style

[Style]
# Style of conversion, Pythonic or VB
# VB tries to make sure that the code works identically
# Pythonic tries to make sure the code looks like Python, but it might behave differently
ConversionStyle = VB
#@-node:Style
#@+node:Functions

[Functions]
# Name of variable used in Functions
ReturnVariableName = _fn_return_value             
# Yes or No, leave at Yes unless good reasons!
PreInitializeReturnVariable = Yes
# Yes or No, whether to rely on return statements
JustUseReturnStatement = No
#@nonl
#@-node:Functions
#@+node:Select

[Select]
# Once, EachTime or Smart, how many times to evaluate the case variable
EvaluateVariable = Once
# Name of select variable (only used if EvaluateVariable is Once)
SelectVariablePrefix = _select
# Yes or No, use numeric index on select variable (needed if you every have nested Selects and EvaluateVariable = Once)
UseNumericIndex = Yes
#@-node:Select
#@+node:Labels

[Labels]
# Yes or No, ignore labels completely
IgnoreLabels = Yes
#@-node:Labels
#@+node:With

[With]
# Once or EachTime, how many times to evaluate the with variable  
EvaluateVariable = Once
# Name of with variable (only used if EvaluateVariable is Once)
WithVariablePrefix = _with
# Yes or No, use numeric index on with variable (needed if you every have nested Withs and EvaluateVariable = Once)
UseNumericIndex = Yes
#@-node:With
#@+node:Properties

[Properties]
# Prefix to add to property Let/Set function name
LetSetVariablePrefix = set
# Prefix to add to property Get function name
GetVariablePrefix = get
# Yes or No, When both Let and Set properties are present default to Let instead of Set
ChooseLetOverSet = No
#@-node:Properties
#@+node:Classes

[Classes]
# Yes or No, whether to use new style classes for all classes
UseNewStyleClasses = Yes
# Yes or No, whether to explicitly type literals in VB.NET
ExplicitlyTypeLiterals = Yes
#@-node:Classes
#@+node:Logger

[Logging]
# Which loggers are allowed to report
Allowed = VB*, vb2PyApp, vb2Py, PlugInAttributeNames, PythonCardControls
# Which loggers are not allowed to report
NotAllowed = VBParser, PlugInLoader
#@nonl
#@-node:Logger
#@+node:CustomIncludes

[Directives]
# Directives, which to choose for directives (#If #Else etc)
Path = VB2PY,1,True,VBA7,Win64,ENABLE_CRITICAL_EVENTS_MOUSE,USE_SKETCHBOOK_DIR,mac,PROG_GENERATOR_PROG

[CustomIncludes]
# This is where you put modules that need to be included - all these
# modules should be placed in the custom folder. 
# eg, ComctlLib=comctllib
XLC_Excel_Consts=ExcelAPI.XLC_Excel_Consts
XLW_Workbook=ExcelAPI.XLW_Workbook
XLWA_WinAPI=ExcelAPI.XLWA_WinAPI
#@-node:CustomIncludes
#@-others
  
#@-node:@file vb2py.ini
#@-leo

[ImportReplacements]
# This is where you can put import replacements
# short modulename, import string
# eg, M01_module=M01,pattgen.M01_module as M01
ExcelAPI.XLC_Excel_Consts=XLC,ExcelAPI.XLC_Excel_Consts as XLC
ExcelAPI.XLW_Workbook=P01,ExcelAPI.XLW_Workbook as P01
ExcelAPI.XLWA_WinAPI=XLWA,ExcelAPI.XLWA_WinAPI as XLWA
#M01_Public_Constants_a_Var=M01,pattgen.M01_Public_Constants_a_Var as M01
#M02_Public=M02,pattgen.M02_Public as M02
#M02_Main=M02a,pattgen.M02_Main as M02a
#M30_Tools=M30,pattgen.M30_Tools as M30
M02_Public=M02,proggen.M02_Public as M02
M02a_Public=M02,proggen.M02a_Public as M02a
M02_global_variables=M02GV,proggen.M02_global_variables as M02GV
M03_Dialog=M03,proggen.M03_Dialog as M03
M06_Write_Header=M06,proggen.M06_Write_Header as M06
M06_Write_Header_LED2Var=M06LED,proggen.M06_Write_Header_LED2Var as M06LED
M06_Write_Header_Sound=M06Sound,proggen.M06_Write_Header_Sound as M06Sound
M06_Write_Header_SW=M06SW,proggen.M06_Write_Header_SW as M06SW
M07_COM_Port=M07,proggen.M07_COM_Port as M07
M08_ARDUINO=M08,proggen.M08_ARDUINO as M08
M09_Language=M09,proggen.M09_Language as M09
M09_SelectMacro=M09SM,proggen.M09_SelectMacro as M09SM
M09_SelectMacro_Treeview=M09SMT,proggen.M09_SelectMacro_Treeview as M09SMT
M10_Par_Description=M10,proggen.M10_Par_Description as M10
M20_PageEvents_a_Functions=M20,proggen.M20_PageEvents_a_Functions as M20
M25_Columns=M25,proggen.M25_Columns as M25
M27_Sheet_Icons=M27,proggen.M27_Sheet_Icons as M27
M28_Diverse=M28,proggen.M28_Diverse as M28
M30_Tools=M30,proggen.M30_Tools as M30
M31_Sound=M31,proggen.M31_Sound as M31
M37_Inst_Libraries=M37,proggen.M37_Inst_Libraries as M37
M38_Extensions=M38,proggen.M38_Extensions as M38
M60_CheckColors=M60,proggen.M60_CheckColors as M60
M70_Exp_Libraries=M70,proggen.M70_Exp_Libraries as M70
M80_Create_Mulitplexer=M80,proggen.M80_Create_Mulitplexer as M80

Prog_Generator=PG,mlpyproggen.Prog_Generator as PG
StdImportExtension=proggen
#@-node:ImportReplacements
#@-others
  
#@-node:@file vb2py.ini
#@-leo
